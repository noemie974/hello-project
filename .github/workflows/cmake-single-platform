# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  run:
    runs-on: ubuntu-latest
    container: ${{ matrix.config.container }}
    strategy:
      matrix:
        config:
        - {container: "ghcr.io/geode-solutions/ubuntu:master", system: "ubuntu", lib: "lib", shared: "ON"}
        
    steps:
    
    - uses: actions/checkout@v3

    - name: Compile
    
      run:
        mkdir -p build
        cd build
        cmake --debug-find -G "Ninja" -DCMAKE_BUILD_TYPE=Debug -DBUILD_SHARED_LIBS:BOOL=${{ matrix.config.shared }} -DCMAKE_PREFIX_PATH="${{ steps.repos.outputs.path }}" ..
        cmake --build . -t third_party
        cd ${{ inputs.directory }}
        cmake --build . -t essential
        cmake --build . -t install
        ctest --output-on-failure -j 2 -L essential
        
    - name: Test
      run: |
        rm -rf $GITHUB_WORKSPACE/build/${{ inputs.directory }}/bin
        mkdir -p test
        cd test
        cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_PREFIX_PATH:PATH="${{ steps.repos.outputs.path }};$GITHUB_WORKSPACE/build/${{ inputs.directory }}/install;$GITHUB_WORKSPACE/build" ../tests
        if [ "${{ matrix.config.shared }}" = "ON" ]; then 
          cmake --build .
          ctest --output-on-failure -j 2
        else
          cmake --build . -t essential
          ctest --output-on-failure -j 2 -L essential
        fi
    # steps:
    # - uses: actions/checkout@v3

    # - name: Configure CMake
    #   # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    #   # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    #   run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} 


    # - name: Build
    #   # Build your program with the given configuration
    #   run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    # - name: Test
    #   working-directory: ${{github.workspace}}/build
    #   # Execute tests defined by the CMake configuration.
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #  run: ctest -C ${{env.BUILD_TYPE}}

